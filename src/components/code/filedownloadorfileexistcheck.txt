useEffect(() => {
    axios.get(consutil.FOOD_LIST_API+"all")
      .then(response => {
        setFoodlist(response.data);
        if (response.data) {
          for (const key in response.data) {
            if (Object.hasOwnProperty.call(response.data, key)) {
              const item = response.data[key];
              // 각 요소에 대해 수행할 작업
              //console.log(`ID: ${key}, Name: ${item.foodimage}`);
              let foodimgfile = item.foodimage;
              if (foodimgfile == null) {
                continue;
              }
              console.log(foodimgfile)
              if (!checkIfFileUploaded(foodimgfile)){
                handleDownload(foodimgfile)
              }
            }
          }
        }
      })
      .catch(error => console.error('Fetching data failed', error));
  }, []);



   function checkIfFileUploaded(filename) {
    const fileName = localStorage.getItem(filename);
    if (fileName) {
      console.log(`Uploaded file: ${fileName}`);
      return true;
    } else {
      console.log('No file has been uploaded.');
      return false;
    }
  }


  const handleDownload = async (filename) => {
    console.log(filename)
    try {
      const response = await axios.get(consutil.FILE_DOWNLOAD+filename, {
        responseType: 'blob', // 중요: 파일 데이터를 Blob으로 받아옵니다.
      });
      let base64String = btoa(new Uint8Array(response.data));
      
      localStorage.setItem('fileData', JSON.stringify(base64String));
      // 파일 생성 및 다운로드 링크 생성
      //const url = window.URL.createObjectURL(new Blob([response.data]));
      //const link = document.createElement('a');
      //link.href = url;
      //link.setAttribute(consutil.IMAGE_URL, filename); // 다운로드 파일 이름 지정
      //document.body.appendChild(link);
      //link.download = filename;
      //link.click();

      // 링크 정리
      //link.parentNode.removeChild(link);
      //window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('다운로드 중 오류가 발생했습니다.', error);
    }
  };